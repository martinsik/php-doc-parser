{
  "desc": "Translate characters or replace substrings.",
  "long_desc": "If given three arguments, this function returns a copy of `str` where all occurrences of each (single-byte) character in `from` have been translated to the corresponding character in `to`, i.e., every occurrence of `$from[$n]` has been replaced with `$to[$n]`, where `$n` is a valid offset in both arguments.\\n\\nIf `from` and `to` have different lengths, the extra characters in the longer of the two are ignored. The length of `str` will be the same as the return value's.\\n\\nIf given two arguments, the second should be an array in the form `array('from' => 'to', ...)`. The return value is a string where all the occurrences of the array keys have been replaced by the corresponding values. The longest keys will be tried first. Once a substring has been replaced, its new value will not be searched again.\\n\\nIn this case, the keys and the values may have any length, provided that there is no empty key; additionally, the length of the return value may differ from that of `str`. However, this function will be the most efficient when all the keys have the same size.",
  "ver": "PHP 4, PHP 5, PHP 7",
  "ret_desc": "Returns the translated string.",
  "seealso": [
    "str_replace",
    "preg_replace"
  ],
  "filename": "function.strtr",
  "params": [
    {
      "list": [
        {
          "type": "string",
          "var": "$str",
          "beh": "required",
          "desc": "The string being translated."
        },
        {
          "type": "string",
          "var": "$from",
          "beh": "required",
          "desc": "The string being translated to `to`."
        },
        {
          "type": "string",
          "var": "$to",
          "beh": "required",
          "desc": "The string replacing `from`."
        }
      ],
      "name": "strtr",
      "ret_type": "string"
    },
    {
      "list": [
        {
          "type": "string",
          "var": "$str",
          "beh": "required",
          "desc": "The string being translated."
        },
        {
          "type": "array",
          "var": "$replace_pairs",
          "beh": "required",
          "desc": "The `replace_pairs` parameter may be used instead of `to` and `from`, in which case it's an array in the form `array('from' => 'to', ...)`."
        }
      ],
      "name": "strtr",
      "ret_type": "string"
    }
  ],
  "examples": [
    {
      "title": "strtr() example",
      "source": "\/\/In this form, strtr() does byte-by-byte translation\n\/\/Therefore, we are assuming a single-byte encoding here:\n$addr = strtr($addr, \"\u00e4\u00e5\u00f6\", \"aao\");",
      "output": null
    },
    {
      "title": "strtr() example with two arguments",
      "source": "$trans = array(\"h\" => \"-\", \"hello\" => \"hi\", \"hi\" => \"hello\");\necho strtr(\"hi all, I said hello\", $trans);",
      "output": "hello all, I said hi"
    },
    {
      "title": "strtr() behavior comparison",
      "source": "echo strtr(\"baab\", \"ab\", \"01\"),\"\\n\";\n\n$trans = array(\"ab\" => \"01\");\necho strtr(\"baab\", $trans);",
      "output": "1001\nba01"
    }
  ]
}