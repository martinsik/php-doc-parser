{
    "desc": "Sets a callback for specified URI.",
    "long_desc": "Sets a callback for specified URI.",
    "ver": "PECL event >= 1.4.0-beta",
    "ret_desc": "Returns TRUE on success. Otherwise FALSE.",
    "seealso": [
        "EventHttp::setDefaultCallback"
    ],
    "filename": "eventhttp.setcallback",
    "params": [
        {
            "list": [
                {
                    "type": "string",
                    "var": "$path",
                    "beh": "required",
                    "desc": "The path for which to invoke the callback."
                },
                {
                    "type": "string",
                    "var": "$cb",
                    "beh": "required",
                    "desc": "The callback callable that gets invoked on requested `path` . It should match the following prototype:\\n\\nvoid callback ([ EventHttpRequest `$req` = NULL [, mixed `$arg` = NULL ]] )"
                },
                {
                    "type": "string",
                    "var": "$arg",
                    "beh": "optional",
                    "desc": "Custom data."
                }
            ],
            "name": "EventHttp::setCallback",
            "ret_type": "void"
        }
    ],
    "examples": [
        {
            "title": "EventHttp::setCallback() example",
            "source": "\/*\n * Simple HTTP server.\n *\n * To test it:\n * 1) Run it on a port of your choice, e.g.:\n * $ php examples\/http.php 8010\n * 2) In another terminal connect to some address on this port\n * and make GET or POST request(others are turned off here), e.g.:\n * $ nc -t 127.0.0.1 8010\n * POST \/about HTTP\/1.0\n * Content-Type: text\/plain\n * Content-Length: 4\n * Connection: close\n * (press Enter)\n *\n * It will output\n * a=12\n * HTTP\/1.0 200 OK\n * Content-Type: text\/html; charset=ISO-8859-1\n * Connection: close\n *\n * 3) See what the server outputs on the previous terminal window.\n *\/\n\nfunction _http_dump($req, $data) {\n    static $counter      = 0;\n    static $max_requests = 2;\n\n    if (++$counter >= $max_requests)  {\n        echo \"Counter reached max requests $max_requests. Exiting\\n\";\n        exit();\n    }\n\n    echo __METHOD__, \" called\\n\";\n    echo \"request:\"; var_dump($req);\n    echo \"data:\"; var_dump($data);\n\n    echo \"\\n===== DUMP =====\\n\";\n    echo \"Command:\", $req->getCommand(), PHP_EOL;\n    echo \"URI:\", $req->getUri(), PHP_EOL;\n    echo \"Input headers:\"; var_dump($req->getInputHeaders());\n    echo \"Output headers:\"; var_dump($req->getOutputHeaders());\n\n    echo \"\\n >> Sending reply ...\";\n    $req->sendReply(200, \"OK\");\n    echo \"OK\\n\";\n\n    echo \"\\n >> Reading input buffer ...\\n\";\n    $buf = $req->getInputBuffer();\n    while ($s = $buf->readLine(EventBuffer::EOL_ANY)) {\n        echo $s, PHP_EOL;\n    }\n    echo \"No more data in the buffer\\n\";\n}\n\nfunction _http_about($req) {\n    echo __METHOD__, PHP_EOL;\n    echo \"URI: \", $req->getUri(), PHP_EOL;\n    echo \"\\n >> Sending reply ...\";\n    $req->sendReply(200, \"OK\");\n    echo \"OK\\n\";\n}\n\nfunction _http_default($req, $data) {\n    echo __METHOD__, PHP_EOL;\n    echo \"URI: \", $req->getUri(), PHP_EOL;\n    echo \"\\n >> Sending reply ...\";\n    $req->sendReply(200, \"OK\");\n    echo \"OK\\n\";\n}\n\n$port = 8010;\nif ($argc > 1) {\n    $port = (int) $argv[1];\n}\nif ($port <= 0 || $port > 65535) {\n    exit(\"Invalid port\");\n}\n\n$base = new EventBase();\n$http = new EventHttp($base);\n$http->setAllowedMethods(EventHttpRequest::CMD_GET | EventHttpRequest::CMD_POST);\n\n$http->setCallback(\"\/dump\", \"_http_dump\", array(4, 8));\n$http->setCallback(\"\/about\", \"_http_about\");\n$http->setDefaultCallback(\"_http_default\", \"custom data value\");\n\n$http->bind(\"0.0.0.0\", 8010);\n$base->loop();",
            "output": "a=12\nHTTP\/1.0 200 OK\nContent-Type: text\/html; charset=ISO-8859-1\nConnection: close"
        }
    ]
}