{
    "desc": "Returns the JSON representation of a value.",
    "long_desc": "Returns a string containing the JSON representation of `value`.",
    "ver": "PHP 5 >= 5.2.0, PECL json >= 1.2.0",
    "ret_desc": "Returns a JSON encoded string on success or FALSE on failure.",
    "seealso": [
        "JsonSerializable", "json_decode", "json_last_error", "serialize"
    ],
    "filename": "function.json-encode",
    "params": [
        {
            "name": "json_encode",
            "list": [
                {
                    "type": "mixed",
                    "var": "$value",
                    "beh": "required",
                    "desc": "The `value` being encoded. Can be any type except a resource.\\n\\nAll string data must be UTF-8 encoded.\\n\\n**Note**: PHP implements a superset of JSON as specified in the original \u00bb\u00a0RFC 4627 - it will also encode and decode scalar types and `NULL`. RFC 4627 only supports these values when they are nested inside an array or an object. Although this superset is consistent with the expanded definition of \"JSON text\" in the newer \u00bb\u00a0RFC 7159 (which aims to supersede RFC 4627) and \u00bb\u00a0ECMA-404, this may cause interoperability issues with older JSON parsers that adhere strictly to RFC 4627 when encoding a single scalar value."
                },
                {
                    "type": "int",
                    "var": "$options",
                    "beh": "optional",
                    "desc": "Bitmask consisting of `JSON_HEX_QUOT`, `JSON_HEX_TAG`, `JSON_HEX_AMP`, `JSON_HEX_APOS`, `JSON_NUMERIC_CHECK`, `JSON_PRETTY_PRINT`, `JSON_UNESCAPED_SLASHES`, `JSON_FORCE_OBJECT`, `JSON_PRESERVE_ZERO_FRACTION`, `JSON_UNESCAPED_UNICODE`. The behaviour of these constants is described on the JSON constants page.",
                    "default": 0
                },
                {
                    "type": "int",
                    "var": "$depth",
                    "beh": "optional",
                    "desc": "Set the maximum depth. Must be greater than zero.",
                    "default": 512
                }
            ],
            "ret_type": "string"
        }
    ],
    "examples": [
        {
            "title": "A json_encode() example",
            "source": "$arr = array('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5);\n\necho json_encode($arr);",
            "output": "{\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}"
        },
        {
            "title": "A json_encode() example showing some options in use",
            "source": "$a = array('<foo>',\"'bar'\",'\"baz\"','&blong&', \"\\xc3\\xa9\");\n\necho \"Normal: \",  json_encode($a), \"\\n\";\necho \"Tags: \",    json_encode($a, JSON_HEX_TAG), \"\\n\";\necho \"Apos: \",    json_encode($a, JSON_HEX_APOS), \"\\n\";\necho \"Quot: \",    json_encode($a, JSON_HEX_QUOT), \"\\n\";\necho \"Amp: \",     json_encode($a, JSON_HEX_AMP), \"\\n\";\necho \"Unicode: \", json_encode($a, JSON_UNESCAPED_UNICODE), \"\\n\";\necho \"All: \",     json_encode($a, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP | JSON_UNESCAPED_UNICODE), \"\\n\\n\";\n\n$b = array();\n\necho \"Empty array output as array: \", json_encode($b), \"\\n\";\necho \"Empty array output as object: \", json_encode($b, JSON_FORCE_OBJECT), \"\\n\\n\";\n\n$c = array(array(1,2,3));\n\necho \"Non-associative array output as array: \", json_encode($c), \"\\n\";\necho \"Non-associative array output as object: \", json_encode($c, JSON_FORCE_OBJECT), \"\\n\\n\";\n\n$d = array('foo' => 'bar', 'baz' => 'long');\n\necho \"Associative array always output as object: \", json_encode($d), \"\\n\";\necho \"Associative array always output as object: \", json_encode($d, JSON_FORCE_OBJECT), \"\\n\\n\";",
            "output": "Normal: [\"<foo>\",\"'bar'\",\"\\\"baz\\\"\",\"&blong&\",\"\\u00e9\"]\nTags: [\"\\u003Cfoo\\u003E\",\"'bar'\",\"\\\"baz\\\"\",\"&blong&\",\"\\u00e9\"]\nApos: [\"<foo>\",\"\\u0027bar\\u0027\",\"\\\"baz\\\"\",\"&blong&\",\"\\u00e9\"]\nQuot: [\"<foo>\",\"'bar'\",\"\\u0022baz\\u0022\",\"&blong&\",\"\\u00e9\"]\nAmp: [\"<foo>\",\"'bar'\",\"\\\"baz\\\"\",\"\\u0026blong\\u0026\",\"\\u00e9\"]\nUnicode: [\"<foo>\",\"'bar'\",\"\\\"baz\\\"\",\"&blong&\",\"\u00e9\"]\nAll: [\"\\u003Cfoo\\u003E\",\"\\u0027bar\\u0027\",\"\\u0022baz\\u0022\",\"\\u0026blong\\u0026\",\"\u00e9\"]\n\nEmpty array output as array: []\nEmpty array output as object: {}\n\nNon-associative array output as array: [[1,2,3]]\nNon-associative array output as object: {\"0\":{\"0\":1,\"1\":2,\"2\":3}}\n\nAssociative array always output as object: {\"foo\":\"bar\",\"baz\":\"long\"}\nAssociative array always output as object: {\"foo\":\"bar\",\"baz\":\"long\"}"
        },
        {
            "title": "JSON_NUMERIC_CHECK option example",
            "source": "echo \"Strings representing numbers automatically turned into numbers\".PHP_EOL;\n$numbers = array('+123123', '-123123', '1.2e3', '0.00001');\nvar_dump(\n $numbers,\n json_encode($numbers, JSON_NUMERIC_CHECK)\n);\necho \"Strings containing improperly formatted numbers\".PHP_EOL;\n$strings = array('+a33123456789', 'a123');\nvar_dump(\n $strings,\n json_encode($strings, JSON_NUMERIC_CHECK)\n);",
            "output": "Strings representing numbers automatically turned into numbers\narray(4) {\n  [0]=>\n  string(7) \"+123123\"\n  [1]=>\n  string(7) \"-123123\"\n  [2]=>\n  string(5) \"1.2e3\"\n  [3]=>\n  string(7) \"0.00001\"\n}\nstring(28) \"[123123,-123123,1200,1.0e-5]\"\nStrings containing improperly formatted numbers\narray(2) {\n  [0]=>\n  string(13) \"+a33123456789\"\n  [1]=>\n  string(4) \"a123\"\n}\nstring(24) \"[\"+a33123456789\",\"a123\"]\""
        },
        {
            "title": "Sequential versus non-sequential array example",
            "source": "echo \"Sequential array\".PHP_EOL;\n$sequential = array(\"foo\", \"bar\", \"baz\", \"blong\");\nvar_dump(\n $sequential,\n json_encode($sequential)\n);\n\necho PHP_EOL.\"Non-sequential array\".PHP_EOL;\n$nonsequential = array(1=>\"foo\", 2=>\"bar\", 3=>\"baz\", 4=>\"blong\");\nvar_dump(\n $nonsequential,\n json_encode($nonsequential)\n);\n\necho PHP_EOL.\"Sequential array with one key unset\".PHP_EOL;\nunset($sequential[1]);\nvar_dump(\n $sequential,\n json_encode($sequential)\n);",
            "output": "Sequential array\narray(4) {\n  [0]=>\n  string(3) \"foo\"\n  [1]=>\n  string(3) \"bar\"\n  [2]=>\n  string(3) \"baz\"\n  [3]=>\n  string(5) \"blong\"\n}\nstring(27) \"[\"foo\",\"bar\",\"baz\",\"blong\"]\"\n\nNon-sequential array\narray(4) {\n  [1]=>\n  string(3) \"foo\"\n  [2]=>\n  string(3) \"bar\"\n  [3]=>\n  string(3) \"baz\"\n  [4]=>\n  string(5) \"blong\"\n}\nstring(43) \"{\"1\":\"foo\",\"2\":\"bar\",\"3\":\"baz\",\"4\":\"blong\"}\"\n\nSequential array with one key unset\narray(3) {\n  [0]=>\n  string(3) \"foo\"\n  [2]=>\n  string(3) \"baz\"\n  [3]=>\n  string(5) \"blong\"\n}\nstring(33) \"{\"0\":\"foo\",\"2\":\"baz\",\"3\":\"blong\"}\""
        },
        {
            "title": "JSON_PRESERVE_ZERO_FRACTION option example",
            "source": "var_dump(json_encode(12.0, JSON_PRESERVE_ZERO_FRACTION));\nvar_dump(json_encode(12.0));",
            "output": "string(4) \"12.0\"\nstring(2) \"12\""
        }
    ]
}